Шаблон проектирования: Мост

  ==========  1  ==========

Напишите реализации нужных классов, так чтобы у вас получился Мост между назначением самолёта и сферой использования.

from abc import ABC, abstractmethod

# Passenger & Cargo Carriers
class Carrier(ABC):
    @abstractmethod
    def carry_military(self, items):
        pass

    @abstractmethod
    def carry_commercial(self, items):
        pass


# Military & Commercial Planes
class Plane(ABC):
    @abstractmethod
    def display_description(self):
        pass

    @abstractmethod
    def add_objects(self, new_objects):
        pass



  ==========  2  ==========

Вам дана иерархия наследования, проблема которой заключается в необходимости реализации огромного количества классов.
Необходимо провести рефакторинг этой иерархии, задав в базовом классе Shape конструктор, принимающий интерфейса Renderer, объявленный как:

  class Renderer(ABC):
      @property
      def what_to_render_as(self):
          return None

VectorRenderer и RasterRenderer так же должны оперировать через интерфейс Renderer.
Каждый наследник класса Shape должен иметь конструктор, принимающий Renderer и реализованный таким образом, что вызовы __str__() на экземплярах этих наследников должны работать корректно.
Например:
  str(Triangle(RasterRenderer()) # returns "Drawing Triangle as pixels"

Sample Input:
  1
Sample Output:
  Drawing Square as lines Drawing Triangle as pixels

import sys
from abc import ABC


# class Shape:
#     def __init__(self):
#         self.name = None
#
#
# class Triangle(Shape):
#     def __init__(self):
#         super().__init__()
#         self.name = 'Triangle'
#
#
# class Square(Shape):
#     def __init__(self):
#         super().__init__()
#         self.name = 'Square'
#
#
# class VectorSquare(Square):
#     def __str__(self):
#         return f'Drawing {self.name} as lines'
#
#
# class RasterSquare(Square):
#     def __str__(self):
#         return f'Drawing {self.name} as pixels'

# imagine VectorTriangle and RasterTriangle are here too

class Renderer(ABC):
    @property
    def what_to_render_as(self):
        return None

# TODO: reimplement Shape, Square, Triangle and Renderer/VectorRenderer/RasterRenderer


# код для проверки
sq = Square(VectorRenderer())
tr = Triangle(RasterRenderer())

print(f'{str(sq)} {str(tr)}')



  =========================

Все задания по проекту выполняются в локальном репозитории (каталоге) проекта и загружаются в свой удалённый репозиторий.

Функции обязательно документируются.
Параметры функций обязательно аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий проекта.

Преподаватель пишет комментарии и правки в коде проекта и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.